package models.database

import scala.slick.driver.MySQLDriver.simple._
import scala.slick.lifted.{ ProvenShape, ForeignKeyQuery }
import play.api.db.DB
import play.api.Play.current

//case class Employee(id: Option[Long], name: String, dept_id: Long, manager_id: Long, isManager: Boolean)

// DEPARTMENT TABLE CREATION 
class Departments(tag: Tag) extends Table[(Long, String)](tag, "DEPARTMENT") {

  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  def name = column[String]("name")

  def * = (id, name)
}

// Employees TABLE CREATION with foreignKey 
class Employees(tag: Tag) extends Table[(Long, String, Long, Boolean)](tag, "EMPLOYEE") {

  println("Inside Employees class....")

  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  def name = column[String]("name")
  def dept_id = column[Long]("dept_id")
  def isManager = column[Boolean]("isManager")
  def * = (id, name, dept_id, isManager)

  def departments = foreignKey("DEPT_FK", dept_id, TableQuery[Departments])(_.id)
}

// Manager Table creation with foreignKeys(as 's' is coming so multiple :P )

//case class Manager(id: Option[Long], emp_id: Long, dept_id: Long, reportee_id: Long)

class Managers(tag: Tag) extends Table[(Long, Long, Long)](tag, "MANAGER") {

  def id = column[Long]("id", O.PrimaryKey, O.AutoInc)
  def emp_id = column[Long]("emp_id")
  def reportee_id = column[Long]("reportee_id")
  //def * = (id.?, emp_id, dept_id, reportee_id) <> (Manager.tupled, Manager.unapply _) previous version of slick

  def * = (id, emp_id, reportee_id)

  def employees_emp_id = foreignKey("EMP-ID_FK", emp_id, TableQuery[Employees])(_.id)
  def employees_dept_id = foreignKey("DEPT-ID_FK", reportee_id, TableQuery[Employees])(_.id)
}

object EmployeeUtil {

  def setup {

    val department = TableQuery[Departments]
    val employee = TableQuery[Employees]
    val manager = TableQuery[Managers]

    Database.forURL("jdbc:mysql://localhost/play", "root", "admin", driver = "com.mysql.jdbc.Driver") withSession {
      implicit session =>
        (department.ddl).create
        (employee.ddl).create
        (manager.ddl).create
    }
  }

  def getAllDepartments = {
    Database.forURL("jdbc:mysql://localhost/play", "root", "admin", driver = "com.mysql.jdbc.Driver") withSession {
      implicit session =>

        val departments = TableQuery[Departments]
        println("\n####### DEPARTMENTS #######")
        departments foreach {
          case (id, name) =>
            println("Id: " + id + " Name: " + name)
        }
    }
  }

  def getAllEmployees = {

    Database.forURL("jdbc:mysql://localhost/play", "root", "admin", driver = "com.mysql.jdbc.Driver") withSession {
      implicit session =>
        val employees = TableQuery[Employees]
        println("\n\n####### Employees #######")
        employees foreach {
          case (id, name, dept_id, isManager) =>
            println("Id: " + id + " Name: " + name + " dept_id:" + dept_id + " isManager:" + isManager)
        }
    }
  }

  
    def getAllManagers = {

    Database.forURL("jdbc:mysql://localhost/play", "root", "admin", driver = "com.mysql.jdbc.Driver") withSession {
      implicit session =>
        val managers = TableQuery[Employees]
        println("\n\n####### Managers #######")
        
        //managers.foreach(m => if(m._4) println(m._2 +" "+ m._4))
        
        managers.filter(m => if(m._4)println(m._2))
        
        /*
        managers foreach {
          case (id, name, dept_id, isManager) if (isManager==true) => 
            println("Id: " + id + " Name: " + name + " dept_id:" + dept_id + " isManager:" + isManager)
        }
        */
        
        
        
        
    }
  }
  
  
  
  
  
  
}